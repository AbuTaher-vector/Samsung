#include<climits>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<vector>
#include<iostream>
#include<map>
using namespace std;
map<int,vector<int> >mp;
vector<int>g[15];
int mn=INT_MAX;
int vis[15],dfsvis[15];
void dfs(int u,vector<int>&a){
     vis[u]=1;
     dfsvis[u]=1;
     a.push_back(u);
     for(auto v:g[u]){
        if(!vis[v]){
          dfs(v,a);
        }else if(dfsvis[v]){
               vector<int>b;
               int sum=0;
               sum+=v;
               b.push_back(v);
               for(int i=a.size()-1;i>=0;i--){
                   if(a[i]==v) break;
                   b.push_back(a[i]);
                   sum+=a[i];
               }
               sort(b.begin(),b.end());
               mn=min(mn,sum);
               mp[sum]=b;
        }
     }
     a.pop_back();
     vis[u]=0;
     dfsvis[u]=0;
     return;
}
int main(){
  int n,m;
  cin>>n>>m;
  int u,v;
  while(m--){
    cin>>u>>v;
    g[u].push_back(v);
  }
  vector<int>a(n+2);
  for(int i=1;i<=n;i++){
        if(!vis[i]) dfs(i,a);
  }
  for(auto x:mp[mn]) cout<<x<<" ";
    cout<<"\n";

}
// Link : https://www.hackerrank.com/contests/target-samsung-13-nov19/challenges/detect-cycle-in-directed-graph/problem
