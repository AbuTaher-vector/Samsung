/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void subtree(TreeNode *root,int k,vector<int>&ans){
        if(root==NULL || k<0) return;
        if(k==0){
            ans.push_back(root->val);
            return;
        }
        subtree(root->left,k-1,ans);
        subtree(root->right,k-1,ans);
    }
    int find(TreeNode *root,TreeNode *target,int k,vector<int>&ans){
        if(root==NULL) return -1;
        if(root==target){
            subtree(root,k,ans);
            return 0;
        }
        int dl = find(root->left,target,k,ans);
        if(dl!=-1){
            if(dl+1==k){
                ans.push_back(root->val);
            }else subtree(root->right,k-dl-2,ans);
            return 1+dl;
        }
        int dr = find(root->right,target,k,ans);
        if(dr!=-1){
            if(dr+1==k){
                ans.push_back(root->val);
            }else subtree(root->left,k-dr-2,ans);
            return 1+dr;
        }
        return -1;
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int>ans;
        find(root,target,k,ans);
        return ans;
    }
};
