#include<iostream>
#include<queue>
using namespace std;
const int N = 1e5 + 9;
vector<pair<int,int> >g[N];
int main(){
  int n,m;
  cin>>n>>m;
  while(m--){
    int u,v,w;
    cin>>u>>v>>w;
        g[u].push_back(make_pair(v,w));
  }
  int source,destination;
  cin>>source>>destination;
  vector<int>dis(N,INT_MAX);
  priority_queue<pair<int,int>, vector<pair<int,int> >,greater<pair<int,int> > >q;
  q.push(make_pair(0,source));
  dis[source] = 0;
  while(!q.empty()){
    int node = q.top().second;
    int distance = q.top().first;
    q.pop();
    for(auto x:g[node]){
      int node1 = x.first;
      int distance1 = x.second;
      if(distance1+distance<dis[node1]){
        dis[node1] = distance+distance1;
        q.push(make_pair(dis[node1],node1));
      }
    }
  }
  for(int i=1;i<=n;i++) cout<<dis[i]<<" ";
    cout<<"\n";
  cout<<dis[destination]<<"\n";
}
